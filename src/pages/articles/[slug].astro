---
interface Article {
  id: number;
  title: string;
  description: string;
  slug: string;
  createdAt: string;
  updatedAt: string;
  publishedAt: string;
  cover: {
    url: string;
    formats: {
      thumbnail: { url: string };
      small: { url: string };
      medium: { url: string };
      large: { url: string };
    };
  };
  author: {
    name: string;
    email: string;
  };
  category: {
    name: string;
    slug: string;
  };
  blocks: Array<{
    __component: string;
    id: number;
    body?: string;
    title?: string;
  }>;
}

export async function getStaticPaths() {
  const response = await fetch('http://localhost:1337/api/articles?populate=*');
  const data = await response.json();
  const articles = Array.isArray(data.data) ? data.data as Article[] : [];

  return articles.map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}

const { article } = Astro.props;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{article.title}</title>
	</head>
	<body class="bg-gray-100 min-h-screen">
		<div class="container mx-auto px-4 py-8">
			<a href="/" class="inline-block mb-8 text-blue-600 hover:text-blue-800">
				← Back to Articles
			</a>
			<article class="bg-white rounded-lg shadow-md overflow-hidden">
				<div class="relative h-96">
					<img
						src={`http://localhost:1337${article.cover.formats.large.url}`}
						alt={article.title}
						class="w-full h-full object-cover"
					/>
				</div>
				<div class="p-8">
					<div class="flex items-center gap-4 mb-6">
						<span class="px-3 py-1 text-sm font-semibold text-blue-600 bg-blue-100 rounded-full">
							{article.category.name}
						</span>
						<span class="text-gray-500">by {article.author.name}</span>
					</div>
					<h1 class="text-4xl font-bold text-gray-800 mb-4">{article.title}</h1>
					<p class="text-xl text-gray-600 mb-8">{article.description}</p>
					
					<div class="prose prose-lg max-w-none">
						{article.blocks.map((block) => {
							if (block.__component === 'shared.rich-text' && block.body) {
								return <div set:html={block.body} />;
							}
							if (block.__component === 'shared.quote' && block.title && block.body) {
								return (
									<blockquote class="border-l-4 border-blue-500 pl-4 my-8">
										<p class="text-xl italic mb-2">{block.body}</p>
										<footer class="text-gray-600">— {block.title}</footer>
									</blockquote>
								);
							}
							return null;
						})}
					</div>

					<div class="border-t mt-8 pt-6">
						<div class="text-sm text-gray-500">
							<p>Created: {new Date(article.createdAt).toLocaleDateString()}</p>
							<p>Updated: {new Date(article.updatedAt).toLocaleDateString()}</p>
							<p>Published: {new Date(article.publishedAt).toLocaleDateString()}</p>
						</div>
					</div>
				</div>
			</article>
		</div>
	</body>
</html> 